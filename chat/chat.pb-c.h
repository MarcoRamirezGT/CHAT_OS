/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: chat.proto */

#ifndef PROTOBUF_C_chat_2eproto__INCLUDED
#define PROTOBUF_C_chat_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Chat__UserRegistration Chat__UserRegistration;
typedef struct _Chat__ChangeStatus Chat__ChangeStatus;
typedef struct _Chat__Message Chat__Message;
typedef struct _Chat__UserInformation Chat__UserInformation;
typedef struct _Chat__UserRequest Chat__UserRequest;
typedef struct _Chat__ConnectedUsers Chat__ConnectedUsers;
typedef struct _Chat__ClientRequest Chat__ClientRequest;
typedef struct _Chat__ServerResponse Chat__ServerResponse;


/* --- enums --- */

typedef enum _Chat__ClientRequest__Option {
  CHAT__CLIENT_REQUEST__OPTION__USER_LOGIN = 0,
  CHAT__CLIENT_REQUEST__OPTION__CONNECTED_USERS = 1,
  CHAT__CLIENT_REQUEST__OPTION__USER_INFORMATION = 2,
  CHAT__CLIENT_REQUEST__OPTION__STATUS_CHANGE = 3,
  CHAT__CLIENT_REQUEST__OPTION__SEND_MESSAGE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHAT__CLIENT_REQUEST__OPTION)
} Chat__ClientRequest__Option;
typedef enum _Chat__ServerResponse__Option {
  CHAT__SERVER_RESPONSE__OPTION__USER_LOGIN = 0,
  CHAT__SERVER_RESPONSE__OPTION__CONNECTED_USERS = 1,
  CHAT__SERVER_RESPONSE__OPTION__USER_INFORMATION = 2,
  CHAT__SERVER_RESPONSE__OPTION__STATUS_CHANGE = 3,
  CHAT__SERVER_RESPONSE__OPTION__SEND_MESSAGE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHAT__SERVER_RESPONSE__OPTION)
} Chat__ServerResponse__Option;
typedef enum _Chat__ServerResponse__Code {
  CHAT__SERVER_RESPONSE__CODE__FAILED_OPERATION = 0,
  CHAT__SERVER_RESPONSE__CODE__SUCCESSFUL_OPERATION = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHAT__SERVER_RESPONSE__CODE)
} Chat__ServerResponse__Code;

/* --- messages --- */

struct  _Chat__UserRegistration
{
  ProtobufCMessage base;
  char *usarname;
  char *ip;
};
#define CHAT__USER_REGISTRATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__user_registration__descriptor) \
    , NULL, NULL }


struct  _Chat__ChangeStatus
{
  ProtobufCMessage base;
  char *username;
  char *status;
};
#define CHAT__CHANGE_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__change_status__descriptor) \
    , NULL, NULL }


/*
 * Mandar un mensaje
 * all = todos los usuarios
 * (username) = usuario específico
 */
struct  _Chat__Message
{
  ProtobufCMessage base;
  char *receiver;
  char *sender;
  char *text;
};
#define CHAT__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__message__descriptor) \
    , NULL, NULL, NULL }


/*
 * Obtener informacion de usuario
 */
struct  _Chat__UserInformation
{
  ProtobufCMessage base;
  char *username;
  char *ip;
  char *status;
};
#define CHAT__USER_INFORMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__user_information__descriptor) \
    , NULL, NULL, NULL }


/*
 * Solicitud de información de usuario/s
 * user (all) = todos los usuarios
 * user (username) = usuario en específico
 */
struct  _Chat__UserRequest
{
  ProtobufCMessage base;
  char *user;
};
#define CHAT__USER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__user_request__descriptor) \
    , NULL }


/*
 * Mostrar usuarios conectados
 */
struct  _Chat__ConnectedUsers
{
  ProtobufCMessage base;
  size_t n_users;
  Chat__UserInformation **users;
};
#define CHAT__CONNECTED_USERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__connected_users__descriptor) \
    , 0,NULL }


/*
 * Solicitud de cliente
 * option (0) = Registro de usuario
 * option (1) = Listado de usuarios conectados
 * option (2) = Información de usuario
 * option (3) = Cambio de estado
 * option (4) = mensaje
 */
struct  _Chat__ClientRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean has_option;
  Chat__ClientRequest__Option option;
  Chat__UserRegistration *newuser;
  Chat__UserRequest *user;
  Chat__ChangeStatus *status;
  Chat__Message *messg;
};
#define CHAT__CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__client_request__descriptor) \
    , 0, CHAT__CLIENT_REQUEST__OPTION__USER_LOGIN, NULL, NULL, NULL, NULL }


/*
 * Respuesta del servidor
 * option (0) = Registro de usuario
 * option (1) = Listado de usuarios conectados
 * option (2) = Información de usuario
 * option (3) = Cambio de estado
 * option (4) = mensaje
 */
struct  _Chat__ServerResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_option;
  Chat__ServerResponse__Option option;
  protobuf_c_boolean has_code;
  Chat__ServerResponse__Code code;
  char *response;
  Chat__ConnectedUsers *users;
  Chat__UserInformation *user;
  Chat__Message *messg;
  Chat__ChangeStatus *status;
};
#define CHAT__SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__server_response__descriptor) \
    , 0, CHAT__SERVER_RESPONSE__OPTION__USER_LOGIN, 0, CHAT__SERVER_RESPONSE__CODE__FAILED_OPERATION, NULL, NULL, NULL, NULL, NULL }


/* Chat__UserRegistration methods */
void   chat__user_registration__init
                     (Chat__UserRegistration         *message);
size_t chat__user_registration__get_packed_size
                     (const Chat__UserRegistration   *message);
size_t chat__user_registration__pack
                     (const Chat__UserRegistration   *message,
                      uint8_t             *out);
size_t chat__user_registration__pack_to_buffer
                     (const Chat__UserRegistration   *message,
                      ProtobufCBuffer     *buffer);
Chat__UserRegistration *
       chat__user_registration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__user_registration__free_unpacked
                     (Chat__UserRegistration *message,
                      ProtobufCAllocator *allocator);
/* Chat__ChangeStatus methods */
void   chat__change_status__init
                     (Chat__ChangeStatus         *message);
size_t chat__change_status__get_packed_size
                     (const Chat__ChangeStatus   *message);
size_t chat__change_status__pack
                     (const Chat__ChangeStatus   *message,
                      uint8_t             *out);
size_t chat__change_status__pack_to_buffer
                     (const Chat__ChangeStatus   *message,
                      ProtobufCBuffer     *buffer);
Chat__ChangeStatus *
       chat__change_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__change_status__free_unpacked
                     (Chat__ChangeStatus *message,
                      ProtobufCAllocator *allocator);
/* Chat__Message methods */
void   chat__message__init
                     (Chat__Message         *message);
size_t chat__message__get_packed_size
                     (const Chat__Message   *message);
size_t chat__message__pack
                     (const Chat__Message   *message,
                      uint8_t             *out);
size_t chat__message__pack_to_buffer
                     (const Chat__Message   *message,
                      ProtobufCBuffer     *buffer);
Chat__Message *
       chat__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__message__free_unpacked
                     (Chat__Message *message,
                      ProtobufCAllocator *allocator);
/* Chat__UserInformation methods */
void   chat__user_information__init
                     (Chat__UserInformation         *message);
size_t chat__user_information__get_packed_size
                     (const Chat__UserInformation   *message);
size_t chat__user_information__pack
                     (const Chat__UserInformation   *message,
                      uint8_t             *out);
size_t chat__user_information__pack_to_buffer
                     (const Chat__UserInformation   *message,
                      ProtobufCBuffer     *buffer);
Chat__UserInformation *
       chat__user_information__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__user_information__free_unpacked
                     (Chat__UserInformation *message,
                      ProtobufCAllocator *allocator);
/* Chat__UserRequest methods */
void   chat__user_request__init
                     (Chat__UserRequest         *message);
size_t chat__user_request__get_packed_size
                     (const Chat__UserRequest   *message);
size_t chat__user_request__pack
                     (const Chat__UserRequest   *message,
                      uint8_t             *out);
size_t chat__user_request__pack_to_buffer
                     (const Chat__UserRequest   *message,
                      ProtobufCBuffer     *buffer);
Chat__UserRequest *
       chat__user_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__user_request__free_unpacked
                     (Chat__UserRequest *message,
                      ProtobufCAllocator *allocator);
/* Chat__ConnectedUsers methods */
void   chat__connected_users__init
                     (Chat__ConnectedUsers         *message);
size_t chat__connected_users__get_packed_size
                     (const Chat__ConnectedUsers   *message);
size_t chat__connected_users__pack
                     (const Chat__ConnectedUsers   *message,
                      uint8_t             *out);
size_t chat__connected_users__pack_to_buffer
                     (const Chat__ConnectedUsers   *message,
                      ProtobufCBuffer     *buffer);
Chat__ConnectedUsers *
       chat__connected_users__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__connected_users__free_unpacked
                     (Chat__ConnectedUsers *message,
                      ProtobufCAllocator *allocator);
/* Chat__ClientRequest methods */
void   chat__client_request__init
                     (Chat__ClientRequest         *message);
size_t chat__client_request__get_packed_size
                     (const Chat__ClientRequest   *message);
size_t chat__client_request__pack
                     (const Chat__ClientRequest   *message,
                      uint8_t             *out);
size_t chat__client_request__pack_to_buffer
                     (const Chat__ClientRequest   *message,
                      ProtobufCBuffer     *buffer);
Chat__ClientRequest *
       chat__client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__client_request__free_unpacked
                     (Chat__ClientRequest *message,
                      ProtobufCAllocator *allocator);
/* Chat__ServerResponse methods */
void   chat__server_response__init
                     (Chat__ServerResponse         *message);
size_t chat__server_response__get_packed_size
                     (const Chat__ServerResponse   *message);
size_t chat__server_response__pack
                     (const Chat__ServerResponse   *message,
                      uint8_t             *out);
size_t chat__server_response__pack_to_buffer
                     (const Chat__ServerResponse   *message,
                      ProtobufCBuffer     *buffer);
Chat__ServerResponse *
       chat__server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__server_response__free_unpacked
                     (Chat__ServerResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Chat__UserRegistration_Closure)
                 (const Chat__UserRegistration *message,
                  void *closure_data);
typedef void (*Chat__ChangeStatus_Closure)
                 (const Chat__ChangeStatus *message,
                  void *closure_data);
typedef void (*Chat__Message_Closure)
                 (const Chat__Message *message,
                  void *closure_data);
typedef void (*Chat__UserInformation_Closure)
                 (const Chat__UserInformation *message,
                  void *closure_data);
typedef void (*Chat__UserRequest_Closure)
                 (const Chat__UserRequest *message,
                  void *closure_data);
typedef void (*Chat__ConnectedUsers_Closure)
                 (const Chat__ConnectedUsers *message,
                  void *closure_data);
typedef void (*Chat__ClientRequest_Closure)
                 (const Chat__ClientRequest *message,
                  void *closure_data);
typedef void (*Chat__ServerResponse_Closure)
                 (const Chat__ServerResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor chat__user_registration__descriptor;
extern const ProtobufCMessageDescriptor chat__change_status__descriptor;
extern const ProtobufCMessageDescriptor chat__message__descriptor;
extern const ProtobufCMessageDescriptor chat__user_information__descriptor;
extern const ProtobufCMessageDescriptor chat__user_request__descriptor;
extern const ProtobufCMessageDescriptor chat__connected_users__descriptor;
extern const ProtobufCMessageDescriptor chat__client_request__descriptor;
extern const ProtobufCEnumDescriptor    chat__client_request__option__descriptor;
extern const ProtobufCMessageDescriptor chat__server_response__descriptor;
extern const ProtobufCEnumDescriptor    chat__server_response__option__descriptor;
extern const ProtobufCEnumDescriptor    chat__server_response__code__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_chat_2eproto__INCLUDED */
